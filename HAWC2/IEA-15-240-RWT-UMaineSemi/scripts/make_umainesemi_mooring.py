import os
import math
from datetime import date

import numpy as np
import yaml


mydir = os.path.dirname(os.path.realpath(__file__))  # get path to this file
# yaml file with data
yaml_path = os.path.join(mydir,'../../../WT_Ontology/IEA-15-240-RWT_VolturnUS-S.yaml')

# load the yaml file as nested dictionaries
with open(yaml_path, 'r') as stream:
    try:
        res = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print(exc)

rho_water = res['environment']['water_density']
wdepth = res['environment']['water_depth']
ma  = 685.0             # mass per length in air

D   = 0.333
# D = res['components']['mooring']['line_types'][0]['diameter']

A   = np.pi/4*D**2
mw = ma - rho_water*A   # mass per length in water
EA  = 3.27e+09          # mooring line stiffness
cm  = 1.82
cdp = 1.11
cdl = .20
L   = res['components']['mooring']['lines'][0]['unstretched_length']

R_anchor   = 837.6      # radius from origin to anchor (in xy-plane)
# R_anchor = res['components']['floating_platform']['joints'][8]['location'][0]

R_fairlead = 58.0       # radius from origin to fairlead (in xy-plane)
# R_fairlead = res['components']['floating_platform']['joints'][2]['location'][0]

z_anchor    = wdepth    # z-pos of anchor (at bottom)
z_fairlead  = 14.0      # z-pos of fairlead
z_ifb = -15.0           # z-pos of interface body (body ifb)
nelem = 20

esysmooringdll = 'ESYSMooring.dll'
outfile = ['../htc/IEA_15MW_RWT_UMaineSemi_mooring_system.htc',
           '../htc/IEA_15MW_RWT_UMaineSemi_mooring_system_init.htc']
for file in outfile:
    with open(file, 'w') as fio:
        tmp = []
        tmp.append(f'; THIS FILE IS GENERATED BY \'make_umainesemi_mooring.py\' on {date.today().strftime("%d-%b-%Y")}')
        for i in range(3):
            phi = i*np.pi*2/3
            dvec = np.array([math.sin(phi),-math.cos(phi)])
            xy_anchor        = dvec *  R_anchor
            xy_fairlead_init = dvec * (R_anchor - L)
            xy_fairlead      = dvec *  R_fairlead
            cdp_h2 = 1/2*rho_water*cdp*D
            cdl_h2 = 1/2*rho_water*cdl*D
            cdm_h2 = rho_water*cm*A
            tmp.append('begin ext_sys ;')
            tmp.append('  module elasticBar ;')
            tmp.append(f'  name   line{i+1:1d} ;')
            tmp.append(f"  dll '{esysmooringdll}' ; ")
            tmp.append('  ndata 9  ;')
            tmp.append(f'  data nelem {nelem:d} ;')
            tmp.append(f'  data mass {ma:10.3e} {mw:10.3e} ; ')
            tmp.append(f'  data start_pos {xy_anchor[0]:10.3e} {xy_anchor[1]:10.3e} {z_anchor:10.3e} ;')
            tmp.append(f'  data end_pos {xy_fairlead_init[0]:10.3e} {xy_fairlead_init[1]:10.3e} {z_anchor:10.3e} ;')
            tmp.append(f'  data cdp_cdl_cm {cdp_h2:10.3e} {cdl_h2:10.3e} {cdm_h2:10.3e} ;')
            tmp.append(f'  data axial_stiff {EA:10.3e} ;')
            tmp.append(';  data read_write_initcond_file <fname> ;')
            if (file == outfile[0]):
                tmp.append('  data read_write_initcond 1 0 ;')
            else:
                tmp.append('  data read_write_initcond 0 1 ;')
            tmp.append('  data bottom_prop {:10.3e} 0.01 0.1 ;'.format(wdepth))
            tmp.append(';  data apply_wave_forces <wa> ;')
            tmp.append(';  data apply_wind_forces <wi> ;')
            tmp.append(';  data output position <node> ;')
            tmp.append(';  data output force <node> ;')
            tmp.append(';  data mass_summary <file> ;')
            tmp.append('  data end ;')
            tmp.append('end ext_sys ;')
            tmp.append(';')
        # add line ending and write to file
        fio.writelines([k+'\n' for k in tmp])

file = '../htc/IEA_15MW_RWT_UMaineSemi_mooring_constraint.htc'
with open(file, 'w') as fio:
    tmp = []
    tmp.append(f'; THIS FILE IS GENERATED BY \'make_umainesemi_mooring.py\' on {date.today().strftime("%d-%b-%Y")}')
    for i in range(3):
        phi = i*np.pi*2/3
        dvec = np.array([math.sin(phi),-math.cos(phi)])
        xy_fairlead      = dvec *  R_fairlead
        tmp.append('begin dll ;    ')
        tmp.append(f"  dll '{esysmooringdll}' ; ")
        tmp.append('  init    cstrbarfixedtoglobal_init   ;')
        tmp.append('  update  cstrbarfixedtoglobal_update ;')
        tmp.append('  neq     3 ;')
        tmp.append('  nbodies 0 ;')
        tmp.append('  nesys   1 ;')
        tmp.append(f'  esys_node  line{i+1:1d} {1:d} ;')
        tmp.append('end dll ;')
        tmp.append(';')

        tmp.append('begin dll ;    ')
        tmp.append(f"  dll '{esysmooringdll}' ; ")
        tmp.append(f'  ID  {xy_fairlead[0]:10.3e} {xy_fairlead[1]:10.3e} {z_fairlead-z_ifb:10.3e} 10.0 ;')
        tmp.append('  init    cstrbarsfixedtobodyrelative_init ;')
        tmp.append('  update  cstrbarsfixedtobodyrelative_update ;')
        tmp.append('  neq     3 ;')
        tmp.append('  nbodies 1 ;')
        tmp.append('  nesys   1 ;')
        tmp.append(f'  mbdy_node  ifb {1:d} ;')
        tmp.append(f'  esys_node  line{i+1:1d} {nelem+1:d} ;')
        tmp.append('end dll ;')
    # add line ending and write to file
    fio.writelines([k+'\n' for k in tmp])
